name: 'Data Landing Zone'
 
on:
  push:
    branches: [ main ]
    paths:
    - 'landingzone/**'
    - ".github/workflows/terraform_dlz.yaml"
  pull_request:
    paths:
    - 'landingzone/**'
    - ".github/workflows/terraform_dlz.yaml"

jobs:
  terraform:
    name: 'DLZ_Deployment'
    env:
      CLIENT_ID: ${{ secrets.TF_VAR_APPLICATION_ID }}
      CLIENT_SECRET: ${{ secrets.TF_VAR_SP_SECRET }}
      SUBSCRIPTION_ID: ${{ secrets.TF_VAR_SUBSCRIPTION_ID }}
      TENANT_ID: ${{ secrets.TF_VAR_TENANT_ID }}
    runs-on: ubuntu-latest
## Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        working-directory: ./landingzone
        shell: bash
    steps:
# Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
# Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with: 
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
# https://github.com/actions/setup-node 
    - uses: actions/setup-node@v2
      with:
        node-version: '14'
# Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
# Formatting of tf files
    - name: Terraform Fmt
      run: terraform fmt      
# # Generates an execution plan for Terraform
    - name: Terraform Plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color
# On push to main, build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve